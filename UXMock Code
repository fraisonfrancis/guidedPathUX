<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Salesforce-Themed Guided Wizard</title>
    <style>
        /* Salesforce-inspired color palette */
        :root {
            --sf-blue: #0070d2; /* Primary Salesforce Blue */
            --sf-blue-dark: #005fb2; /* Darker blue for hover */
            --sf-gray-light: #f3f3f3; /* Light background gray */
            --sf-gray-medium: #e0e0e0; /* Medium gray for borders/inactive elements */
            --sf-gray-dark: #706e6b; /* Darker gray for text */
            --sf-text-dark: #1a1a1a; /* Very dark text */
            --sf-white: #ffffff;
        }

        /* Custom styles for the wizard */
        body {
            font-family: 'Salesforce Sans', Arial, sans-serif; /* Mimicking Salesforce font */
            background-color: var(--sf-gray-light);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }

        #wizard-container {
            background-color: var(--sf-white);
            border-radius: 6px; /* Slightly less rounded than previous, common in SF */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            max-width: 800px; /* Increased max-width for vertical layout */
            width: 100%;
            padding: 32px; /* Adjusted padding */
            display: flex;
            flex-direction: column;
            gap: 20px; /* Space between sections */
            position: relative; /* For modal positioning */
            border: 1px solid var(--sf-gray-medium); /* Light border */
        }

        h2 {
            font-size: 2rem; /* Adjusted font size */
            font-weight: 600; /* Semi-bold */
            text-align: center;
            color: var(--sf-text-dark);
            margin-bottom: 16px;
        }

        /* Main layout for vertical wizard */
        #wizard-main-content {
            display: flex;
            gap: 30px; /* Space between vertical steps and content */
            flex-wrap: wrap; /* Allow wrapping on small screens */
        }

        #steps-indicator {
            display: flex;
            flex-direction: column; /* Vertical layout */
            align-items: flex-start; /* Align dots/names to the start */
            margin-bottom: 0; /* No bottom margin for vertical */
            padding-left: 15px; /* Space for the vertical line */
            position: relative; /* For the vertical line */
        }

        #steps-indicator::before {
            content: '';
            position: absolute;
            left: 20px; /* Position of the vertical line */
            top: 0;
            bottom: 0;
            width: 2px;
            background-color: var(--sf-gray-medium); /* Color of the vertical line */
            z-index: 0; /* Behind the dots */
        }

        .step-item {
            display: flex;
            align-items: center; /* Align dot and text vertically */
            margin-bottom: 20px; /* Space between step items */
            position: relative;
            z-index: 1; /* Above the vertical line */
        }

        .step-dot {
            width: 12px;
            height: 12px;
            background-color: var(--sf-gray-medium); /* Inactive dot background */
            border-radius: 50%; /* Make it a circle */
            transition: background-color 0.3s ease, border-color 0.3s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            color: var(--sf-white); /* Text color for active dot number */
            font-weight: 600;
            font-size: 0.7rem;
            flex-shrink: 0; /* Prevent dot from shrinking */
            margin-right: 15px; /* Space between dot and text */
            border: 2px solid var(--sf-gray-medium); /* Border for inactive dot */
        }

        .step-dot.active {
            background-color: var(--sf-blue); /* Active dot background */
            border-color: var(--sf-blue); /* Active dot border */
            color: var(--sf-white);
        }

        .step-name {
            font-size: 0.95rem;
            color: var(--sf-gray-dark);
            font-weight: 500;
            white-space: nowrap; /* Prevent text wrapping */
            transition: color 0.3s ease;
        }

        .step-dot.active + .step-name {
            color: var(--sf-blue); /* Active step name color */
            font-weight: 600;
        }

        #wizard-content {
            flex-grow: 1; /* Allow content to take remaining space */
            min-height: 150px;
            text-align: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: var(--sf-text-dark);
            font-size: 1.1rem;
            background-color: var(--sf-white); /* Ensure content background is white */
            padding: 20px; /* Add some padding to content */
            border-radius: 6px; /* Match container rounding */
            border: 1px solid var(--sf-gray-medium); /* Content border */
        }

        #wizard-content h3 {
            font-size: 1.4rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--sf-text-dark);
        }

        #wizard-content p {
            font-size: 0.95rem;
            color: var(--sf-gray-dark);
        }

        .wizard-button {
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
            border: 1px solid transparent;
            box-shadow: none;
        }

        .wizard-button:hover {
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .wizard-button:active {
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
            transform: translateY(0);
        }

        #prev-button {
            background-color: var(--sf-white);
            color: var(--sf-blue);
            border-color: var(--sf-blue);
        }

        #prev-button:hover {
            background-color: var(--sf-gray-light);
        }

        #next-button, #finish-button {
            background-color: var(--sf-blue);
            color: var(--sf-white);
            border-color: var(--sf-blue);
        }

        #next-button:hover, #finish-button:hover {
            background-color: var(--sf-blue-dark);
        }

        #button-container {
            display: flex;
            justify-content: space-between;
            gap: 16px;
            margin-top: 24px;
        }

        #button-container.single-button {
            justify-content: flex-end;
        }

        /* Modal specific styles (Salesforce inspired) */
        .modal-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            border-radius: 6px;
        }

        .modal-content {
            background-color: var(--sf-white);
            padding: 30px;
            border-radius: 6px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 450px;
            width: 90%;
            display: flex;
            flex-direction: column;
            gap: 20px;
            border: 1px solid var(--sf-gray-medium);
        }

        .modal-content h4 {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--sf-text-dark);
        }

        .modal-content p {
            font-size: 0.95rem;
            color: var(--sf-gray-dark);
        }

        .modal-button {
            background-color: var(--sf-blue);
            color: var(--sf-white);
            padding: 10px 20px;
            border-radius: 4px;
            border: 1px solid var(--sf-blue);
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
        }

        .modal-button:hover {
            background-color: var(--sf-blue-dark);
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .modal-button:active {
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) { /* Adjusted breakpoint for vertical layout */
            #wizard-main-content {
                flex-direction: column; /* Stack steps and content vertically */
            }
            #steps-indicator {
                width: 100%; /* Full width for indicator */
                padding-left: 0; /* Remove left padding */
                align-items: center; /* Center items for better appearance */
                margin-bottom: 20px;
            }
            #steps-indicator::before {
                left: 50%; /* Center the line */
                transform: translateX(-50%); /* Adjust for line width */
            }
            .step-item {
                flex-direction: column; /* Stack dot and name */
                margin-bottom: 15px;
                text-align: center;
            }
            .step-dot {
                margin-right: 0; /* Remove margin for stacked layout */
                margin-bottom: 5px; /* Space between dot and name */
            }
            #wizard-content {
                width: 100%; /* Full width for content */
            }
            #button-container {
                flex-direction: column;
            }
            .wizard-button {
                width: 100%;
            }
        }
    </style>
</head>
<body>

    <div id="wizard-container">
        <h2>New Record Wizard</h2>

        <div id="wizard-main-content">
            <div id="steps-indicator">
                <!-- Step names will be dynamically added here by JavaScript -->
            </div>

            <div id="wizard-content">
                <!-- Step content will be dynamically loaded here -->
            </div>
        </div>

        <div id="button-container">
            <button id="prev-button" class="wizard-button" style="display: none;">Previous</button>
            <button id="next-button" class="wizard-button">Next</button>
            <button id="finish-button" class="wizard-button" style="display: none;">Finish</button>
        </div>
    </div>

    <script>
        // Get references to DOM elements
        const wizardContent = document.getElementById('wizard-content');
        const stepsIndicator = document.getElementById('steps-indicator');
        const prevButton = document.getElementById('prev-button');
        const nextButton = document.getElementById('next-button');
        const finishButton = document.getElementById('finish-button');
        const buttonContainer = document.getElementById('button-container');
        const wizardContainer = document.getElementById('wizard-container'); // Used for modal

        // Define the steps of the wizard
        const steps = [
            {
                title: 'Details',
                description: 'Enter the primary details for your new record. All required fields are marked.'
            },
            {
                title: 'Related Info',
                description: 'Add any associated information or related records here.'
            },
            {
                title: 'Attachments',
                description: 'Upload relevant files or documents for this record.'
            },
            {
                title: 'Permissions',
                description: 'Configure sharing settings and user access for this record.'
            },
            {
                title: 'Review',
                description: 'Review all entered information before saving. You can go back to make changes.'
            },
            {
                title: 'Save',
                description: 'Your new record is ready to be created. Click "Finish" to save.'
            }
        ];

        let currentStep = 0; // Initialize the current step

        /**
         * Renders the current step's content and updates the UI.
         */
        function renderStep() {
            // Update the main content area
            wizardContent.innerHTML = `
                <h3>${steps[currentStep].title}</h3>
                <p>${steps[currentStep].description}</p>
            `;

            // Update the steps indicator
            stepsIndicator.innerHTML = ''; // Clear existing items
            steps.forEach((step, index) => {
                const stepItem = document.createElement('div');
                stepItem.classList.add('step-item');

                const dot = document.createElement('div');
                dot.classList.add('step-dot');
                dot.textContent = index + 1; // Show step number in the dot
                if (index === currentStep) {
                    dot.classList.add('active');
                }
                stepItem.appendChild(dot);

                const stepName = document.createElement('span');
                stepName.classList.add('step-name');
                stepName.textContent = step.title; // Show step name next to the dot
                stepItem.appendChild(stepName);

                stepsIndicator.appendChild(stepItem);
            });

            // Handle button visibility based on the current step
            if (currentStep === 0) {
                prevButton.style.display = 'none'; // Hide "Previous" on the first step
                nextButton.style.display = 'block'; // Show "Next"
                finishButton.style.display = 'none'; // Hide "Finish"
                buttonContainer.classList.remove('single-button');
            } else if (currentStep === steps.length - 1) {
                prevButton.style.display = 'none'; // Hide "Previous" on the last step
                nextButton.style.display = 'none'; // Hide "Next"
                finishButton.style.display = 'block'; // Show "Finish"
                buttonContainer.classList.add('single-button'); // Align finish button to the right
            } else {
                prevButton.style.display = 'block'; // Show "Previous"
                nextButton.style.display = 'block'; // Show "Next"
                finishButton.style.display = 'none'; // Hide "Finish"
                buttonContainer.classList.remove('single-button');
            }
        }

        /**
         * Shows a custom modal message instead of alert().
         * @param {string} title - The title of the modal.
         * @param {string} message - The message content of the modal.
         */
        function showModal(title, message) {
            const modalOverlay = document.createElement('div');
            modalOverlay.classList.add('modal-overlay');

            const modalContent = document.createElement('div');
            modalContent.classList.add('modal-content');

            const modalTitle = document.createElement('h4');
            modalTitle.textContent = title;

            const modalMessage = document.createElement('p');
            modalMessage.textContent = message;

            const modalButton = document.createElement('button');
            modalButton.classList.add('modal-button');
            modalButton.textContent = 'OK';
            modalButton.addEventListener('click', () => {
                modalOverlay.remove();
            });

            modalContent.appendChild(modalTitle);
            modalContent.appendChild(modalMessage);
            modalContent.appendChild(modalButton);
            modalOverlay.appendChild(modalContent);

            wizardContainer.appendChild(modalOverlay);
        }

        /**
         * Handles the "Next" button click.
         */
        function handleNext() {
            if (currentStep < steps.length - 1) {
                currentStep++;
                renderStep();
            }
        }

        /**
         * Handles the "Previous" button click.
         */
        function handlePrev() {
            if (currentStep > 0) {
                currentStep--;
                renderStep();
            }
        }

        /**
         * Handles the "Finish" button click.
         * In a real application, this would submit data or redirect the user.
         */
        function handleFinish() {
            showModal('Record Saved!', 'Your new record has been successfully created. Data would be submitted here.');
            // In a real Salesforce flow, you might redirect the user to the new record's page
            // window.location.href = '/new-record-detail-page';
        }

        // Add event listeners to the buttons
        nextButton.addEventListener('click', handleNext);
        prevButton.addEventListener('click', handlePrev);
        finishButton.addEventListener('click', handleFinish);

        // Initial render when the page loads
        document.addEventListener('DOMContentLoaded', renderStep);
    </script>

</body>
</html>
